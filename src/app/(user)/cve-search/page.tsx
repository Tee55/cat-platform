"use client";

import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Search,
  ChevronDown,
  Calendar,
  ArrowRight,
  ChevronUp,
} from "lucide-react";
import Link from "next/link";
import { useEffect, useState, useMemo } from "react";
import type {
  VulnerabilitySchemaType,
  PaginationResponse,
} from "@/shared/types";
import { api } from "@/trpc/react";

const getNumSeverityColor = (score: number): string => {
  if (score >= 9.0) return "text-destructive";
  if (score >= 7.0) return "text-warning";
  if (score >= 4.0) return "text-yellow-500"; // yellow isn't in shadcn tokens by default, keep as is or customize
  return "text-success";
};

const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(handler);
  }, [value, delay]);
  return debouncedValue;
};

type SortField = "dateAdded" | "cveID" | "vendorProject" | "product";
type SortOrder = "asc" | "desc";

interface SortConfig {
  field: SortField;
  order: SortOrder;
}

export default function CVESearch() {
  const [keyword, setKeyword] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [sortConfig, setSortConfig] = useState<SortConfig>({
    field: "dateAdded",
    order: "desc",
  });

  const debouncedKeyword = useDebounce(keyword, 500);

  const {
    data,
    isLoading: loading,
    error,
    refetch: fetchVulnerabilities,
  } = api.vulnerability.getVulnerabilities.useQuery({
    page: currentPage,
    limit: itemsPerPage,
    search: debouncedKeyword || undefined,
    sort: sortConfig.field,
    order: sortConfig.order,
  });

  useEffect(() => {
    if (currentPage !== 1) setCurrentPage(1);
  }, [debouncedKeyword, sortConfig]);

  const handleSort = (field: SortField) => {
    setSortConfig((prev) => ({
      field,
      order: prev.field === field && prev.order === "desc" ? "asc" : "desc",
    }));
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleItemsPerPageChange = (newItemsPerPage: number) => {
    setItemsPerPage(newItemsPerPage);
    setCurrentPage(1);
  };

  const generateCVSSScore = useMemo(() => {
    const scores = new Map();
    return (cveId: string) => {
      if (!scores.has(cveId)) {
        scores.set(cveId, (Math.random() * 5 + 5).toFixed(1));
      }
      return scores.get(cveId);
    };
  }, []);

  const SortIndicator = ({ field }: { field: SortField }) => {
    if (sortConfig.field !== field) {
      return <ChevronDown className="ml-1 h-4 w-4 text-muted-foreground" />;
    }
    return sortConfig.order === "desc" ? (
      <ChevronDown className="ml-1 h-4 w-4 text-foreground" />
    ) : (
      <ChevronUp className="ml-1 h-4 w-4 text-foreground" />
    );
  };

  return (
    <div className="mx-auto max-w-6xl px-4 py-6">
      {/* Search Header */}
      <div className="mb-2 flex items-center justify-between">
        <h1 className="text-2xl font-medium text-foreground">CVE Search</h1>
        <ArrowRight className="h-5 w-5 text-muted-foreground" />
      </div>
      <p className="mb-6 text-sm text-muted-foreground">
        You can search for CVEs, Software, and more. Feel free to use the
        filters on the right to narrow down your search.
      </p>

      {/* Search Bar and Filters Container */}
      <Card className="p-0">
        <CardContent className="p-0">
          {/* Search Bar */}
          <div className="border-b p-4">
            <div className="flex items-center justify-between">
              <div className="relative mr-4 flex-1">
                <input
                  type="text"
                  placeholder="Search CVEs, vendors, products..."
                  className="w-full rounded-md border border-input bg-background px-3 py-2 pr-10 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-primary"
                  value={keyword}
                  onChange={(e) => setKeyword(e.target.value)}
                />
                <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                  <Search className="h-4 w-4 text-muted-foreground" />
                </div>
              </div>
              <div className="text-sm whitespace-nowrap text-muted-foreground">
                SORT BY:
                <Button
                  variant="ghost"
                  size="sm"
                  className="ml-1 font-medium text-foreground"
                  onClick={() => handleSort("dateAdded")}
                >
                  Published <SortIndicator field="dateAdded" />
                </Button>
              </div>
            </div>
          </div>

          {/* Additional Sort Options */}
          <div className="border-b bg-muted/50 px-4 py-2">
            <div className="flex gap-4 text-sm text-muted-foreground">
              <Button
                variant="ghost"
                size="sm"
                className="h-auto px-2 py-1"
                onClick={() => handleSort("cveID")}
              >
                CVE ID <SortIndicator field="cveID" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="h-auto px-2 py-1"
                onClick={() => handleSort("vendorProject")}
              >
                Vendor <SortIndicator field="vendorProject" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="h-auto px-2 py-1"
                onClick={() => handleSort("product")}
              >
                Product <SortIndicator field="product" />
              </Button>
            </div>
          </div>

          {/* Loading/Error States */}
          {loading && (
            <div className="p-8 text-center text-muted-foreground">
              Loading vulnerabilities...
            </div>
          )}

          {error && (
            <div className="p-8 text-center text-destructive">
              Error: {error.message}
              <Button
                variant="outline"
                size="sm"
                className="ml-4"
                onClick={() => fetchVulnerabilities()}
              >
                Retry
              </Button>
            </div>
          )}

          {/* CVE List */}
          {!loading && !error && data && (
            <div className="flex flex-row">
              <div className="flex-1">
                {data.data.length === 0 ? (
                  <div className="p-8 text-center text-muted-foreground">
                    No vulnerabilities found. Try adjusting your search criteria.
                  </div>
                ) : (
                  data.data.map((cve: VulnerabilitySchemaType) => {
                    const cvssScore = generateCVSSScore(cve.cveID || "");
                    return (
                      <div key={cve.cveID}>
                        <CardContent className="flex py-5 transition-colors hover:bg-muted/20">
                          <div className="mr-6">
                            <div
                              className={`text-2xl font-bold md:text-3xl ${getNumSeverityColor(
                                Number(cvssScore),
                              )} text-center`}
                            >
                              {cvssScore}
                            </div>
                            <div className="mt-1 text-center text-xs text-muted-foreground">
                              CVSS3.1
                            </div>
                          </div>
                          <div className="flex-1">
                            <Link
                              href={`/new-cve/detail/${cve.cveID}`}
                              className="font-medium text-primary hover:underline"
                            >
                              {cve.cveID}
                            </Link>
                            <p className="mt-1 text-sm text-foreground">
                              {cve.shortDescription}
                              {cve.requiredAction && (
                                <>
                                  <br />
                                  <span className="font-medium">Required Action:</span>{" "}
                                  {cve.requiredAction}
                                </>
                              )}
                            </p>
                            <div className="mt-3 flex flex-wrap gap-4 text-xs text-muted-foreground">
                              <div className="flex items-center gap-1">
                                <span className="font-medium">Published:</span>{" "}
                                {new Date(cve.dateAdded).toLocaleDateString()}
                              </div>
                              <div className="flex items-center gap-1">
                                <span className="font-medium">Vendor:</span>{" "}
                                {cve.vendorProject}
                              </div>
                              <div className="flex items-center gap-1">
                                <span className="font-medium">Product:</span>{" "}
                                {cve.product}
                              </div>
                              {cve.knownRansomwareCampaignUse && (
                                <div className="flex items-center gap-1 text-destructive">
                                  <span className="font-medium">⚠️ Ransomware:</span>{" "}
                                  {cve.knownRansomwareCampaignUse}
                                </div>
                              )}
                            </div>
                          </div>
                        </CardContent>
                      </div>
                    );
                  })
                )}
              </div>

              {/* Filters Sidebar */}
              <div className="border-l p-4 lg:w-64 text-muted-foreground">
                <div className="mb-3 flex items-center justify-between">
                  <h3 className="text-sm font-medium text-foreground">Filters</h3>
                </div>

                <div className="mb-3 text-sm">
                  <div className="mb-1">Search Results</div>
                  <div className="text-xs text-muted-foreground">
                    {data
                      ? `${data.pagination.total} total vulnerabilities`
                      : "Loading..."}
                  </div>
                </div>

                <div className="mb-3 text-sm">
                  <div className="mb-1">Sort Order</div>
                  <div className="text-xs text-muted-foreground">
                    {sortConfig.field} (
                    {sortConfig.order === "desc"
                      ? "Newest first"
                      : "Oldest first"}
                    )
                  </div>
                </div>

                <div className="mb-6 text-sm">
                  <div className="mb-1">CVSS Score Range</div>
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <div>5.0 (Medium)</div>
                    <div>10.0 (Critical)</div>
                  </div>
                  <div className="mt-1 px-2">
                    <div className="relative h-4">
                      <div className="absolute inset-y-1/2 right-0 left-0 h-1 rounded-full bg-muted"></div>
                      <div className="absolute top-1/2 right-8 left-2 h-1 -translate-y-1/2 transform rounded-full bg-primary"></div>
                      <div className="absolute top-1/2 left-2 h-4 w-4 -translate-y-1/2 rounded-full bg-primary shadow"></div>
                      <div className="absolute top-1/2 right-8 h-4 w-4 -translate-y-1/2 rounded-full bg-primary shadow"></div>
                    </div>
                  </div>
                </div>

                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    className="flex-1"
                    onClick={() => {
                      setKeyword("");
                      setSortConfig({ field: "dateAdded", order: "desc" });
                    }}
                  >
                    Clear filters
                  </Button>
                  <Button
                    size="sm"
                    className="flex-1"
                    onClick={() => fetchVulnerabilities()}
                  >
                    Refresh
                  </Button>
                </div>
              </div>
            </div>
          )}

          {/* Pagination Section */}
          {!loading && !error && data && data.pagination.total > 0 && (
            <div className="mt-4 flex flex-col items-center justify-between gap-2 border-t px-4 pt-4 pb-4 md:flex-row text-muted-foreground">
              <div className="text-sm">
                Showing {(data.pagination.page - 1) * data.pagination.limit + 1}{" "}
                -{" "}
                {Math.min(
                  data.pagination.page * data.pagination.limit,
                  data.pagination.total,
                )}{" "}
                of {data.pagination.total} results
              </div>

              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <label
                    htmlFor="page-size"
                    className="text-sm text-muted-foreground"
                  >
                    Items per page:
                  </label>
                  <select
                    id="page-size"
                    value={itemsPerPage}
                    onChange={(e) =>
                      handleItemsPerPageChange(Number(e.target.value))
                    }
                    className="rounded-md border border-input bg-background px-2 py-1 text-sm text-foreground focus:outline-none focus:ring-1 focus:ring-primary"
                  >
                    <option value={5}>5</option>
                    <option value={10}>10</option>
                    <option value={20}>20</option>
                    <option value={50}>50</option>
                  </select>
                </div>

                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(data.pagination.page - 1)}
                    disabled={!data.pagination.hasPreviousPage}
                  >
                    ← Prev
                  </Button>
                  <span className="self-center text-sm text-muted-foreground">
                    Page {data.pagination.page} of {data.pagination.totalPages}
                  </span>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(data.pagination.page + 1)}
                    disabled={!data.pagination.hasNextPage}
                  >
                    Next →
                  </Button>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

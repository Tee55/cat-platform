import React from 'react';
import { X, AlertTriangle, Shield, Info, FileText } from 'lucide-react';
import type { ScanVulnerabilityResponseType } from '@/shared/types';
import type { AssetType } from '@/shared/types';

interface VulnerabilityModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedSeverityDialog: string;
  selectedAssetDialog: string;
  setSelectedAssetDialog: (asset: string) => void;
  criticalVulnerabilities: ScanVulnerabilityResponseType[];
  highVulnerabilities: ScanVulnerabilityResponseType[];
  mediumVulnerabilities: ScanVulnerabilityResponseType[];
  lowVulnerabilities: ScanVulnerabilityResponseType[];
  infoVulnerabilities: ScanVulnerabilityResponseType[];
  assets: AssetType[];
}

const VulnerabilityModal: React.FC<VulnerabilityModalProps> = ({
  isOpen,
  onClose,
  selectedSeverityDialog,
  selectedAssetDialog,
  setSelectedAssetDialog,
  criticalVulnerabilities,
  highVulnerabilities,
  mediumVulnerabilities,
  lowVulnerabilities,
  infoVulnerabilities,
  assets,
}) => {
  if (!isOpen) return null;

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return <AlertTriangle className="w-5 h-5 text-red-500" />;
      case 'high':
        return <AlertTriangle className="w-5 h-5 text-orange-500" />;
      case 'medium':
        return <Shield className="w-5 h-5 text-yellow-500" />;
      case 'low':
        return <Info className="w-5 h-5 text-blue-500" />;
      case 'info':
        return <Info className="w-5 h-5 text-gray-500" />;
      default:
        return <FileText className="w-5 h-5 text-gray-400" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'bg-red-50 border-red-200 text-red-800';
      case 'high':
        return 'bg-orange-50 border-orange-200 text-orange-800';
      case 'medium':
        return 'bg-yellow-50 border-yellow-200 text-yellow-800';
      case 'low':
        return 'bg-blue-50 border-blue-200 text-blue-800';
      case 'info':
        return 'bg-gray-50 border-gray-200 text-gray-800';
      default:
        return 'bg-gray-50 border-gray-200 text-gray-800';
    }
  };

  const getAlertsForSeverity = (severity: string): ScanVulnerabilityResponseType[] => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return criticalVulnerabilities;
      case 'high':
        return highVulnerabilities;
      case 'medium':
        return mediumVulnerabilities;
      case 'low':
        return lowVulnerabilities;
      case 'info':
        return infoVulnerabilities;
      default:
        return [];
    }
  };

  const filteredAlerts = selectedAssetDialog === 'all' 
    ? getAlertsForSeverity(selectedSeverityDialog)
    : getAlertsForSeverity(selectedSeverityDialog).filter(alert => {
        // Handle the case where asset might be undefined or null
        const assetName = alert.hostId || alert.scanBatchId || 'Unknown'; // Use hostId as asset identifier
        return assetName === selectedAssetDialog;
      });

  const formatTimestamp = (timestamp: string | Date) => {
    try {
      // Handle both string and Date types
      const date = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;
      return date.toLocaleString();
    } catch {
      return timestamp?.toString() || 'Unknown';
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            {getSeverityIcon(selectedSeverityDialog)}
            <h2 className="text-xl font-semibold text-gray-900 capitalize">
              {selectedSeverityDialog} Vulnerabilities
            </h2>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            aria-label="Close modal"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        {/* Asset Filter */}
        <div className="p-6 border-b border-gray-200 bg-gray-50">
          <label htmlFor="asset-filter" className="block text-sm font-medium text-gray-700 mb-2">
            Filter by Asset:
          </label>
          <select
            id="asset-filter"
            value={selectedAssetDialog}
            onChange={(e) => setSelectedAssetDialog(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Assets</option>
            {assets.map((asset) => (
              <option key={asset.name} value={asset.name}>
                {asset.name}
              </option>
            ))}
          </select>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[60vh]">
          {filteredAlerts.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-gray-400 mb-2">
                <FileText className="w-12 h-12 mx-auto" />
              </div>
              <p className="text-gray-500">
                No {selectedSeverityDialog.toLowerCase()} vulnerabilities found
                {selectedAssetDialog !== 'all' && ` for ${selectedAssetDialog}`}
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {filteredAlerts.map((alert) => (
                <div
                  key={alert.id}
                  className={`p-4 rounded-lg border-2 ${getSeverityColor(alert.severity ?? 'unknown')}`}
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center space-x-2 flex-wrap">
                      {getSeverityIcon(alert.severity ?? 'unknown')}
                      <span className="font-medium capitalize">
                        {alert.severity || 'Unknown'}
                      </span>
                      <span className="text-sm bg-white bg-opacity-60 px-2 py-1 rounded">
                        {alert.hostId || 'Unknown Host'}
                      </span>
                      {alert.port && (
                        <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                          Port: {alert.port}
                        </span>
                      )}
                      {alert.service && (
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                          {alert.service}
                        </span>
                      )}
                    </div>
                    <span className="text-xs opacity-75 whitespace-nowrap ml-2">
                      {formatTimestamp(alert.lastSeen)}
                    </span>
                  </div>
                  
                  {alert.synopsis && (
                    <div className="mb-3">
                      <h3 className="font-medium mb-1">Synopsis:</h3>
                      <p className="text-sm">{alert.synopsis}</p>
                    </div>
                  )}
                  
                  {alert.description && (
                    <div className="mb-3">
                      <h3 className="font-medium mb-1">Description:</h3>
                      <p className="text-sm">{alert.description}</p>
                    </div>
                  )}
                  
                  {alert.pluginName && (
                    <div className="mb-3">
                      <span className="font-medium">Plugin: </span>
                      <span className="text-sm">{alert.pluginName}</span>
                      {alert.pluginId && (
                        <span className="text-xs text-gray-500 ml-2">({alert.pluginId})</span>
                      )}
                    </div>
                  )}

                  {(alert.cvssScore || alert.cvss3Score) && (
                    <div className="mb-3">
                      <span className="font-medium">CVSS Score: </span>
                      <span className="text-sm">
                        {alert.cvss3Score || alert.cvssScore}
                        {alert.cvss3Score && ' (v3)'}
                      </span>
                    </div>
                  )}

                  {alert.cve && alert.cve.length > 0 && (
                    <div className="mb-3">
                      <span className="font-medium">CVE: </span>
                      <span className="text-sm">{alert.cve.join(', ')}</span>
                    </div>
                  )}
                  
                  {alert.solution && (
                    <div className="bg-white bg-opacity-60 p-3 rounded mb-3">
                      <h4 className="font-medium mb-1">Solution:</h4>
                      <p className="text-sm">{alert.solution}</p>
                    </div>
                  )}

                  {alert.pluginOutput && (
                    <div className="bg-gray-100 p-3 rounded text-xs font-mono">
                      <h4 className="font-medium mb-1 font-sans">Plugin Output:</h4>
                      <pre className="whitespace-pre-wrap">{alert.pluginOutput}</pre>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="px-6 py-4 border-t border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <span>
              Showing {filteredAlerts.length} of {getAlertsForSeverity(selectedSeverityDialog).length} {selectedSeverityDialog.toLowerCase()} alerts
            </span>
            <button
              onClick={onClose}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityModal;
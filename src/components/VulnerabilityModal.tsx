"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Button } from "@/components/ui/button";
import { X, AlertTriangle, Shield, Info, FileText } from "lucide-react";
import type { ScanVulnerabilityResponseType, AssetType } from "@/shared/types";
import { cn } from "@/lib/utils";
import { useMemo } from "react";

interface VulnerabilityModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedSeverityDialog: string;
  selectedAssetDialog: string;
  setSelectedAssetDialog: (asset: string) => void;
  criticalVulnerabilities: ScanVulnerabilityResponseType[];
  highVulnerabilities: ScanVulnerabilityResponseType[];
  mediumVulnerabilities: ScanVulnerabilityResponseType[];
  lowVulnerabilities: ScanVulnerabilityResponseType[];
  infoVulnerabilities: ScanVulnerabilityResponseType[];
  assets: AssetType[];
}

const severityMap = {
  critical: {
    icon: <AlertTriangle className="h-4 w-4 text-red-500" />,
    color: "bg-red-100 text-red-800",
  },
  high: {
    icon: <AlertTriangle className="h-4 w-4 text-orange-500" />,
    color: "bg-orange-100 text-orange-800",
  },
  medium: {
    icon: <Shield className="h-4 w-4 text-yellow-500" />,
    color: "bg-yellow-100 text-yellow-800",
  },
  low: {
    icon: <Info className="h-4 w-4 text-blue-500" />,
    color: "bg-blue-100 text-blue-800",
  },
  info: {
    icon: <Info className="h-4 w-4 text-gray-500" />,
    color: "bg-gray-100 text-gray-800",
  },
};

const getAlertsForSeverity = (
  severity: string,
  vulnerabilities: {
    critical: ScanVulnerabilityResponseType[];
    high: ScanVulnerabilityResponseType[];
    medium: ScanVulnerabilityResponseType[];
    low: ScanVulnerabilityResponseType[];
    info: ScanVulnerabilityResponseType[];
  },
): ScanVulnerabilityResponseType[] => {
  return (
    vulnerabilities[severity.toLowerCase() as keyof typeof vulnerabilities] ??
    []
  );
};

const VulnerabilityModal = ({
  isOpen,
  onClose,
  selectedSeverityDialog,
  selectedAssetDialog,
  setSelectedAssetDialog,
  criticalVulnerabilities,
  highVulnerabilities,
  mediumVulnerabilities,
  lowVulnerabilities,
  infoVulnerabilities,
  assets,
}: VulnerabilityModalProps) => {
  const severityKey =
    selectedSeverityDialog.toLowerCase() as keyof typeof severityMap;
  const { icon, color } = severityMap[severityKey] || {
    icon: <FileText className="h-4 w-4 text-gray-500" />,
    color: "bg-gray-100 text-gray-800",
  };

  const allVulns = {
    critical: criticalVulnerabilities,
    high: highVulnerabilities,
    medium: mediumVulnerabilities,
    low: lowVulnerabilities,
    info: infoVulnerabilities,
  };

  const filtered = useMemo(() => {
    const severity = selectedSeverityDialog.toLowerCase();
    const severityMap = {
      critical: criticalVulnerabilities,
      high: highVulnerabilities,
      medium: mediumVulnerabilities,
      low: lowVulnerabilities,
      info: infoVulnerabilities,
    };

    const all = severityMap[severity as keyof typeof severityMap] || [];

    return selectedAssetDialog.toLowerCase() === "all"
      ? all
      : all.filter((alert) => alert.hostId === selectedAssetDialog);
  }, [
    selectedAssetDialog,
    selectedSeverityDialog,
    criticalVulnerabilities,
    highVulnerabilities,
    mediumVulnerabilities,
    lowVulnerabilities,
    infoVulnerabilities,
  ]);
  
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="h-[90vh] max-w-4xl">
        <DialogHeader className="mb-4">
          <DialogTitle className="flex items-center gap-2 text-lg font-semibold">
            {icon}
            {selectedSeverityDialog} Vulnerabilities
          </DialogTitle>
          <DialogDescription className="text-sm">
            Filter and explore vulnerabilities based on severity and host.
          </DialogDescription>
        </DialogHeader>

        {/* Asset Filter */}
        <div className="space-y-2">
          <label htmlFor="asset-select" className="text-sm font-medium">
            Filter by Asset
          </label>
          <select
            id="asset-select"
            value={selectedAssetDialog}
            onChange={(e) => setSelectedAssetDialog(e.target.value)}
            className="w-full rounded border px-3 py-2 text-sm"
          >
            <option value="all">All Assets</option>
            {assets.map((asset) => (
              <option key={asset.name} value={asset.name}>
                {asset.name}
              </option>
            ))}
          </select>
        </div>

        <Separator className="my-4" />

        {/* Content */}
        <ScrollArea className="h-[55vh] pr-2">
          {filtered.length === 0 ? (
            <div className="text-muted-foreground mt-10 space-y-2 text-center">
              <FileText className="mx-auto h-10 w-10" />
              <p>No {selectedSeverityDialog} vulnerabilities found.</p>
            </div>
          ) : (
            <div className="space-y-4">
              {filtered.map((alert) => (
                <div
                  key={alert.id}
                  className={cn(
                    "space-y-2 rounded-md border p-4",
                    severityMap[
                      alert.severity?.toLowerCase() as keyof typeof severityMap
                    ]?.color || "bg-gray-50 text-gray-800",
                  )}
                >
                  <div className="flex flex-wrap items-center justify-between gap-2">
                    <div className="flex flex-wrap items-center gap-2">
                      {
                        severityMap[
                          alert.severity?.toLowerCase() as keyof typeof severityMap
                        ]?.icon
                      }
                      <Badge variant="secondary" className="text-xs">
                        {alert.severity || "Unknown"}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {alert.hostId || "Unknown Host"}
                      </Badge>
                      {alert.port && (
                        <Badge className="text-xs">Port: {alert.port}</Badge>
                      )}
                      {alert.service && (
                        <Badge className="bg-green-100 text-xs text-green-800">
                          {alert.service}
                        </Badge>
                      )}
                    </div>
                    <span className="text-xs opacity-70">
                      {new Date(alert.lastSeen).toLocaleString()}
                    </span>
                  </div>

                  {alert.synopsis && (
                    <p className="text-sm">
                      <strong>Synopsis:</strong> {alert.synopsis}
                    </p>
                  )}
                  {alert.description && (
                    <p className="text-sm">
                      <strong>Description:</strong> {alert.description}
                    </p>
                  )}

                  <div className="space-x-2 text-sm">
                    {alert.pluginName && (
                      <>
                        <strong>Plugin:</strong> {alert.pluginName}
                        {alert.pluginId && (
                          <span className="text-muted-foreground text-xs">
                            ({alert.pluginId})
                          </span>
                        )}
                      </>
                    )}
                  </div>

                  {(alert.cvss3Score || alert.cvssScore) && (
                    <p className="text-sm">
                      <strong>CVSS:</strong>{" "}
                      {alert.cvss3Score || alert.cvssScore}
                      {alert.cvss3Score && " (v3)"}
                    </p>
                  )}

                  {alert.cve && alert.cve?.length > 0 && (
                    <p className="text-sm">
                      <strong>CVE:</strong> {alert.cve.join(", ")}
                    </p>
                  )}

                  {alert.solution && (
                    <div className="rounded bg-white/60 p-2 text-sm">
                      <strong>Solution:</strong> {alert.solution}
                    </div>
                  )}

                  {alert.pluginOutput && (
                    <div className="rounded bg-gray-100 p-2 font-mono text-xs">
                      <strong className="mb-1 block font-sans">
                        Plugin Output:
                      </strong>
                      <pre className="whitespace-pre-wrap">
                        {alert.pluginOutput}
                      </pre>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </ScrollArea>

        <DialogFooter className="text-muted-foreground mt-4 flex justify-between text-sm">
          <span>
            Showing {filtered.length} of{" "}
            {getAlertsForSeverity(selectedSeverityDialog, allVulns).length}{" "}
            {selectedSeverityDialog} alerts
          </span>
          <Button variant="default" onClick={onClose}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default VulnerabilityModal;

import { z } from "zod";
import { createTRPCRouter, publicProcedure } from "@/server/api/trpc";
import { vulnerabilityService } from "@/server/api/services/vulnerability";

// Input validation schemas
const PaginationParamsSchema = z.object({
  page: z.number().min(1).optional(),
  limit: z.number().min(1).max(100).optional(),
  sort: z.string().optional(),
  order: z.enum(['asc', 'desc']).optional(),
  search: z.string().optional(),
}).optional().default({});

const VulnerabilityByIdSchema = z.object({
  id: z.string().min(1, "ID is required"),
});

export const vulnerabilityRouter = createTRPCRouter({
  // Get paginated vulnerabilities
  getVulnerabilities: publicProcedure
    .input(PaginationParamsSchema)
    .query(async ({ input }) => {
      return await vulnerabilityService.fetchVulnerabilities(input);
    }),

  // Get vulnerability by ID
  getVulnerabilityById: publicProcedure
    .input(VulnerabilityByIdSchema)
    .query(async ({ input }) => {
      return await vulnerabilityService.fetchVulnerabilityById(input.id);
    }),
});